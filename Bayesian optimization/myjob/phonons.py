# -*- coding: utf-8 -*-
# -------------------------------------------------------------
# Two-probe Configuration
# -------------------------------------------------------------

# -------------------------------------------------------------
# Left Electrode
# -------------------------------------------------------------

#ML
#random number for input
import numpy as np
import csv

#f=open('/home/xiao/combo/result_jsh')
#read = f.readlines()
#test = map(int, read)

 
test=[1,2,4,2,1,3]

#test=np.loadtxt('result_jsh')
#test=[1,2,4,2,1,3]
# with open('D:\data.csv') as f:
    # datareader = csv.reader(f);
#test = numpy.loadtxt(open("data.csv","rb"),delimiter=",",skiprows=0)


# Set up lattice
vector_a = [7.7088781285, 0.0, 0.0]*Angstrom
vector_b = [0.0, 7.7088781285, 0.0]*Angstrom
vector_c = [0.0, 0.0, 10.902]*Angstrom
left_electrode_lattice = UnitCell(vector_a, vector_b, vector_c)

# Define elements
left_electrode_elements = [Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium]

# Define coordinates
left_electrode_coordinates = [[  1.927219532124,  -0.            ,   0.681375      ],
                              [  5.781658596372,  -0.            ,   0.681375      ],
                              [  1.927219532124,   3.854439064248,   0.681375      ],
                              [  5.781658596372,   3.854439064248,   0.681375      ],
                              [  1.927219532124,   1.927219532124,   2.044125      ],
                              [  5.781658596372,   1.927219532124,   2.044125      ],
                              [  1.927219532124,   5.781658596372,   2.044125      ],
                              [  5.781658596372,   5.781658596372,   2.044125      ],
                              [ -0.            ,   1.927219532124,   3.406875      ],
                              [  3.854439064248,   1.927219532124,   3.406875      ],
                              [ -0.            ,   5.781658596372,   3.406875      ],
                              [  3.854439064248,   5.781658596372,   3.406875      ],
                              [ -0.            ,   0.            ,   4.769625      ],
                              [  3.854439064248,   0.            ,   4.769625      ],
                              [ -0.            ,   3.854439064248,   4.769625      ],
                              [  3.854439064248,   3.854439064248,   4.769625      ],
                              [  1.927219532124,  -0.            ,   6.132375      ],
                              [  5.781658596372,  -0.            ,   6.132375      ],
                              [  1.927219532124,   3.854439064248,   6.132375      ],
                              [  5.781658596372,   3.854439064248,   6.132375      ],
                              [  1.927219532124,   1.927219532124,   7.495125      ],
                              [  5.781658596372,   1.927219532124,   7.495125      ],
                              [  1.927219532124,   5.781658596372,   7.495125      ],
                              [  5.781658596372,   5.781658596372,   7.495125      ],
                              [ -0.            ,   1.927219532124,   8.857875      ],
                              [  3.854439064248,   1.927219532124,   8.857875      ],
                              [ -0.            ,   5.781658596372,   8.857875      ],
                              [  3.854439064248,   5.781658596372,   8.857875      ],
                              [ -0.            ,   0.            ,  10.220625      ],
                              [  3.854439064248,   0.            ,  10.220625      ],
                              [ -0.            ,   3.854439064248,  10.220625      ],
                              [  3.854439064248,   3.854439064248,  10.220625      ]]*Angstrom

# Set up configuration
left_electrode = BulkConfiguration(
    bravais_lattice=left_electrode_lattice,
    elements=left_electrode_elements,
    cartesian_coordinates=left_electrode_coordinates
    )

# -------------------------------------------------------------
# Right Electrode
# -------------------------------------------------------------

# Set up lattice
vector_a = [7.7088781285, 0.0, 0.0]*Angstrom
vector_b = [0.0, 7.7088781285, 0.0]*Angstrom
vector_c = [0.0, 0.0, 10.902]*Angstrom
right_electrode_lattice = UnitCell(vector_a, vector_b, vector_c)

# Define elements
right_electrode_elements = [Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                            Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                            Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                            Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                            Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                            Aluminium, Aluminium, Aluminium, Aluminium]

# Define coordinates
right_electrode_coordinates = [[  1.927219532124,  -0.            ,   0.681375      ],
                               [  5.781658596372,  -0.            ,   0.681375      ],
                               [  1.927219532124,   3.854439064248,   0.681375      ],
                               [  5.781658596372,   3.854439064248,   0.681375      ],
                               [  1.927219532124,   1.927219532124,   2.044125      ],
                               [  5.781658596372,   1.927219532124,   2.044125      ],
                               [  1.927219532124,   5.781658596372,   2.044125      ],
                               [  5.781658596372,   5.781658596372,   2.044125      ],
                               [ -0.            ,   1.927219532124,   3.406875      ],
                               [  3.854439064248,   1.927219532124,   3.406875      ],
                               [ -0.            ,   5.781658596372,   3.406875      ],
                               [  3.854439064248,   5.781658596372,   3.406875      ],
                               [ -0.            ,   0.            ,   4.769625      ],
                               [  3.854439064248,   0.            ,   4.769625      ],
                               [ -0.            ,   3.854439064248,   4.769625      ],
                               [  3.854439064248,   3.854439064248,   4.769625      ],
                               [  1.927219532124,  -0.            ,   6.132375      ],
                               [  5.781658596372,  -0.            ,   6.132375      ],
                               [  1.927219532124,   3.854439064248,   6.132375      ],
                               [  5.781658596372,   3.854439064248,   6.132375      ],
                               [  1.927219532124,   1.927219532124,   7.495125      ],
                               [  5.781658596372,   1.927219532124,   7.495125      ],
                               [  1.927219532124,   5.781658596372,   7.495125      ],
                               [  5.781658596372,   5.781658596372,   7.495125      ],
                               [ -0.            ,   1.927219532124,   8.857875      ],
                               [  3.854439064248,   1.927219532124,   8.857875      ],
                               [ -0.            ,   5.781658596372,   8.857875      ],
                               [  3.854439064248,   5.781658596372,   8.857875      ],
                               [ -0.            ,   0.            ,  10.220625      ],
                               [  3.854439064248,   0.            ,  10.220625      ],
                               [ -0.            ,   3.854439064248,  10.220625      ],
                               [  3.854439064248,   3.854439064248,  10.220625      ]]*Angstrom

# Set up configuration
right_electrode = BulkConfiguration(
    bravais_lattice=right_electrode_lattice,
    elements=right_electrode_elements,
    cartesian_coordinates=right_electrode_coordinates
    )

# -------------------------------------------------------------
# Central Region
# -------------------------------------------------------------

# Set up lattice
vector_a = [7.7088781285, 0.0, 0.0]*Angstrom
vector_b = [0.0, 7.7088781285, 0.0]*Angstrom
vector_c = [0.0, 0.0, 87.216]*Angstrom
central_region_lattice = UnitCell(vector_a, vector_b, vector_c)

# Define elements
central_region_elements = [Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus,
                           Phosphorus, Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium,
                           Aluminium, Phosphorus, Phosphorus, Phosphorus, Phosphorus,
                           Aluminium, Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus,
                           Phosphorus, Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium,
                           Phosphorus, Phosphorus, Phosphorus, Phosphorus, Aluminium,
                           Aluminium, Aluminium, Aluminium, Phosphorus, Phosphorus, Phosphorus,
                           Phosphorus, Aluminium, Aluminium, Aluminium, Aluminium]

# Define coordinates
central_region_coordinates = [[  1.927219532124,  -0.            ,   0.681375      ],
                              [  5.781658596372,  -0.            ,   0.681375      ],
                              [  1.927219532124,   3.854439064248,   0.681375      ],
                              [  5.781658596372,   3.854439064248,   0.681375      ],
                              [  1.927219532124,   1.927219532124,   2.044125      ],
                              [  5.781658596372,   1.927219532124,   2.044125      ],
                              [  1.927219532124,   5.781658596372,   2.044125      ],
                              [  5.781658596372,   5.781658596372,   2.044125      ],
                              [ -0.            ,   1.927219532124,   3.406875      ],
                              [  3.854439064248,   1.927219532124,   3.406875      ],
                              [ -0.            ,   5.781658596372,   3.406875      ],
                              [  3.854439064248,   5.781658596372,   3.406875      ],
                              [ -0.            ,   0.            ,   4.769625      ],
                              [  3.854439064248,   0.            ,   4.769625      ],
                              [ -0.            ,   3.854439064248,   4.769625      ],
                              [  3.854439064248,   3.854439064248,   4.769625      ],
                              [  1.927219532124,  -0.            ,   6.132375      ],
                              [  5.781658596372,  -0.            ,   6.132375      ],
                              [  1.927219532124,   3.854439064248,   6.132375      ],
                              [  5.781658596372,   3.854439064248,   6.132375      ],
                              [  1.927219532124,   1.927219532124,   7.495125      ],
                              [  5.781658596372,   1.927219532124,   7.495125      ],
                              [  1.927219532124,   5.781658596372,   7.495125      ],
                              [  5.781658596372,   5.781658596372,   7.495125      ],
                              [ -0.            ,   1.927219532124,   8.857875      ],
                              [  3.854439064248,   1.927219532124,   8.857875      ],
                              [ -0.            ,   5.781658596372,   8.857875      ],
                              [  3.854439064248,   5.781658596372,   8.857875      ],
                              [ -0.            ,   0.            ,  10.220625      ],
                              [  3.854439064248,   0.            ,  10.220625      ],
                              [ -0.            ,   3.854439064248,  10.220625      ],
                              [  3.854439064248,   3.854439064248,  10.220625      ],
                              [  1.927219532124,  -0.            ,  11.583375      ],
                              [  5.781658596372,  -0.            ,  11.583375      ],
                              [  1.927219532124,   3.854439064248,  11.583375      ],
                              [  5.781658596372,   3.854439064248,  11.583375      ],
                              [  1.927219532124,   1.927219532124,  12.946125      ],
                              [  5.781658596372,   1.927219532124,  12.946125      ],
                              [  1.927219532124,   5.781658596372,  12.946125      ],
                              [  5.781658596372,   5.781658596372,  12.946125      ],
                              [ -0.            ,   1.927219532124,  14.308875      ],
                              [  3.854439064248,   1.927219532124,  14.308875      ],
                              [ -0.            ,   5.781658596372,  14.308875      ],
                              [  3.854439064248,   5.781658596372,  14.308875      ],
                              [ -0.            ,   0.            ,  15.671625      ],
                              [  3.854439064248,   0.            ,  15.671625      ],
                              [ -0.            ,   3.854439064248,  15.671625      ],
                              [  3.854439064248,   3.854439064248,  15.671625      ],
                              [  1.927219532124,  -0.            ,  17.034375      ],
                              [  5.781658596372,  -0.            ,  17.034375      ],
                              [  1.927219532124,   3.854439064248,  17.034375      ],
                              [  5.781658596372,   3.854439064248,  17.034375      ],
                              [  1.927219532124,   1.927219532124,  18.397125      ],
                              [  5.781658596372,   1.927219532124,  18.397125      ],
                              [  1.927219532124,   5.781658596372,  18.397125      ],
                              [  5.781658596372,   5.781658596372,  18.397125      ],
                              [ -0.            ,   1.927219532124,  19.759875      ],
                              [  3.854439064248,   1.927219532124,  19.759875      ],
                              [ -0.            ,   5.781658596372,  19.759875      ],
                              [  3.854439064248,   5.781658596372,  19.759875      ],
                              [ -0.            ,   0.            ,  21.122625      ],
                              [  3.854439064248,   0.            ,  21.122625      ],
                              [ -0.            ,   3.854439064248,  21.122625      ],
                              [  3.854439064248,   3.854439064248,  21.122625      ],
                              [  1.927219532124,  -0.            ,  22.485375      ],
                              [  5.781658596372,  -0.            ,  22.485375      ],
                              [  1.927219532124,   3.854439064248,  22.485375      ],
                              [  5.781658596372,   3.854439064248,  22.485375      ],
                              [  1.927219532124,   1.927219532124,  23.848125      ],
                              [  5.781658596372,   1.927219532124,  23.848125      ],
                              [  1.927219532124,   5.781658596372,  23.848125      ],
                              [  5.781658596372,   5.781658596372,  23.848125      ],
                              [ -0.            ,   1.927219532124,  25.210875      ],
                              [  3.854439064248,   1.927219532124,  25.210875      ],
                              [ -0.            ,   5.781658596372,  25.210875      ],
                              [  3.854439064248,   5.781658596372,  25.210875      ],
                              [ -0.            ,   0.            ,  26.573625      ],
                              [  3.854439064248,   0.            ,  26.573625      ],
                              [ -0.            ,   3.854439064248,  26.573625      ],
                              [  3.854439064248,   3.854439064248,  26.573625      ],
                              [  1.927219532124,  -0.            ,  27.936375      ],
                              [  5.781658596372,  -0.            ,  27.936375      ],
                              [  1.927219532124,   3.854439064248,  27.936375      ],
                              [  5.781658596372,   3.854439064248,  27.936375      ],
                              [  1.927219532124,   1.927219532124,  29.299125      ],
                              [  5.781658596372,   1.927219532124,  29.299125      ],
                              [  1.927219532124,   5.781658596372,  29.299125      ],
                              [  5.781658596372,   5.781658596372,  29.299125      ],
                              [ -0.            ,   1.927219532124,  30.661875      ],
                              [  3.854439064248,   1.927219532124,  30.661875      ],
                              [ -0.            ,   5.781658596372,  30.661875      ],
                              [  3.854439064248,   5.781658596372,  30.661875      ],
                              [ -0.            ,   0.            ,  32.024625      ],
                              [  3.854439064248,   0.            ,  32.024625      ],
                              [ -0.            ,   3.854439064248,  32.024625      ],
                              [  3.854439064248,   3.854439064248,  32.024625      ],
                              [  1.927219532124,  -0.            ,  33.387375      ],
                              [  5.781658596372,  -0.            ,  33.387375      ],
                              [  1.927219532124,   3.854439064248,  33.387375      ],
                              [  5.781658596372,   3.854439064248,  33.387375      ],
                              [  1.927219532124,   1.927219532124,  34.750125      ],
                              [  5.781658596372,   1.927219532124,  34.750125      ],
                              [  1.927219532124,   5.781658596372,  34.750125      ],
                              [  5.781658596372,   5.781658596372,  34.750125      ],
                              [ -0.            ,   1.927219532124,  36.112875      ],
                              [  3.854439064248,   1.927219532124,  36.112875      ],
                              [ -0.            ,   5.781658596372,  36.112875      ],
                              [  3.854439064248,   5.781658596372,  36.112875      ],
                              [ -0.            ,   0.            ,  37.475625      ],
                              [  3.854439064248,   0.            ,  37.475625      ],
                              [ -0.            ,   3.854439064248,  37.475625      ],
                              [  3.854439064248,   3.854439064248,  37.475625      ],
                              [  1.927219532124,  -0.            ,  38.838375      ],
                              [  5.781658596372,  -0.            ,  38.838375      ],
                              [  1.927219532124,   3.854439064248,  38.838375      ],
                              [  5.781658596372,   3.854439064248,  38.838375      ],
                              [  1.927219532124,   1.927219532124,  40.201125      ],
                              [  5.781658596372,   1.927219532124,  40.201125      ],
                              [  1.927219532124,   5.781658596372,  40.201125      ],
                              [  5.781658596372,   5.781658596372,  40.201125      ],
                              [ -0.            ,   1.927219532124,  41.563875      ],
                              [  3.854439064248,   1.927219532124,  41.563875      ],
                              [ -0.            ,   5.781658596372,  41.563875      ],
                              [  3.854439064248,   5.781658596372,  41.563875      ],
                              [ -0.            ,   0.            ,  42.926625      ],
                              [  3.854439064248,   0.            ,  42.926625      ],
                              [ -0.            ,   3.854439064248,  42.926625      ],
                              [  3.854439064248,   3.854439064248,  42.926625      ],
                              [  1.927219532124,  -0.            ,  44.289375      ],
                              [  5.781658596372,  -0.            ,  44.289375      ],
                              [  1.927219532124,   3.854439064248,  44.289375      ],
                              [  5.781658596372,   3.854439064248,  44.289375      ],
                              [  1.927219532124,   1.927219532124,  45.652125      ],
                              [  5.781658596372,   1.927219532124,  45.652125      ],
                              [  1.927219532124,   5.781658596372,  45.652125      ],
                              [  5.781658596372,   5.781658596372,  45.652125      ],
                              [ -0.            ,   1.927219532124,  47.014875      ],
                              [  3.854439064248,   1.927219532124,  47.014875      ],
                              [ -0.            ,   5.781658596372,  47.014875      ],
                              [  3.854439064248,   5.781658596372,  47.014875      ],
                              [ -0.            ,   0.            ,  48.377625      ],
                              [  3.854439064248,   0.            ,  48.377625      ],
                              [ -0.            ,   3.854439064248,  48.377625      ],
                              [  3.854439064248,   3.854439064248,  48.377625      ],
                              [  1.927219532124,  -0.            ,  49.740375      ],
                              [  5.781658596372,  -0.            ,  49.740375      ],
                              [  1.927219532124,   3.854439064248,  49.740375      ],
                              [  5.781658596372,   3.854439064248,  49.740375      ],
                              [  1.927219532124,   1.927219532124,  51.103125      ],
                              [  5.781658596372,   1.927219532124,  51.103125      ],
                              [  1.927219532124,   5.781658596372,  51.103125      ],
                              [  5.781658596372,   5.781658596372,  51.103125      ],
                              [ -0.            ,   1.927219532124,  52.465875      ],
                              [  3.854439064248,   1.927219532124,  52.465875      ],
                              [ -0.            ,   5.781658596372,  52.465875      ],
                              [  3.854439064248,   5.781658596372,  52.465875      ],
                              [ -0.            ,   0.            ,  53.828625      ],
                              [  3.854439064248,   0.            ,  53.828625      ],
                              [ -0.            ,   3.854439064248,  53.828625      ],
                              [  3.854439064248,   3.854439064248,  53.828625      ],
                              [  1.927219532124,  -0.            ,  55.191375      ],
                              [  5.781658596372,  -0.            ,  55.191375      ],
                              [  1.927219532124,   3.854439064248,  55.191375      ],
                              [  5.781658596372,   3.854439064248,  55.191375      ],
                              [  1.927219532124,   1.927219532124,  56.554125      ],
                              [  5.781658596372,   1.927219532124,  56.554125      ],
                              [  1.927219532124,   5.781658596372,  56.554125      ],
                              [  5.781658596372,   5.781658596372,  56.554125      ],
                              [ -0.            ,   1.927219532124,  57.916875      ],
                              [  3.854439064248,   1.927219532124,  57.916875      ],
                              [ -0.            ,   5.781658596372,  57.916875      ],
                              [  3.854439064248,   5.781658596372,  57.916875      ],
                              [ -0.            ,   0.            ,  59.279625      ],
                              [  3.854439064248,   0.            ,  59.279625      ],
                              [ -0.            ,   3.854439064248,  59.279625      ],
                              [  3.854439064248,   3.854439064248,  59.279625      ],
                              [  1.927219532124,  -0.            ,  60.642375      ],
                              [  5.781658596372,  -0.            ,  60.642375      ],
                              [  1.927219532124,   3.854439064248,  60.642375      ],
                              [  5.781658596372,   3.854439064248,  60.642375      ],
                              [  1.927219532124,   1.927219532124,  62.005125      ],
                              [  5.781658596372,   1.927219532124,  62.005125      ],
                              [  1.927219532124,   5.781658596372,  62.005125      ],
                              [  5.781658596372,   5.781658596372,  62.005125      ],
                              [ -0.            ,   1.927219532124,  63.367875      ],
                              [  3.854439064248,   1.927219532124,  63.367875      ],
                              [ -0.            ,   5.781658596372,  63.367875      ],
                              [  3.854439064248,   5.781658596372,  63.367875      ],
                              [ -0.            ,   0.            ,  64.730625      ],
                              [  3.854439064248,   0.            ,  64.730625      ],
                              [ -0.            ,   3.854439064248,  64.730625      ],
                              [  3.854439064248,   3.854439064248,  64.730625      ],
                              [  1.927219532124,  -0.            ,  66.093375      ],
                              [  5.781658596372,  -0.            ,  66.093375      ],
                              [  1.927219532124,   3.854439064248,  66.093375      ],
                              [  5.781658596372,   3.854439064248,  66.093375      ],
                              [  1.927219532124,   1.927219532124,  67.456125      ],
                              [  5.781658596372,   1.927219532124,  67.456125      ],
                              [  1.927219532124,   5.781658596372,  67.456125      ],
                              [  5.781658596372,   5.781658596372,  67.456125      ],
                              [ -0.            ,   1.927219532124,  68.818875      ],
                              [  3.854439064248,   1.927219532124,  68.818875      ],
                              [ -0.            ,   5.781658596372,  68.818875      ],
                              [  3.854439064248,   5.781658596372,  68.818875      ],
                              [ -0.            ,   0.            ,  70.181625      ],
                              [  3.854439064248,   0.            ,  70.181625      ],
                              [ -0.            ,   3.854439064248,  70.181625      ],
                              [  3.854439064248,   3.854439064248,  70.181625      ],
                              [  1.927219532124,  -0.            ,  71.544375      ],
                              [  5.781658596372,  -0.            ,  71.544375      ],
                              [  1.927219532124,   3.854439064248,  71.544375      ],
                              [  5.781658596372,   3.854439064248,  71.544375      ],
                              [  1.927219532124,   1.927219532124,  72.907125      ],
                              [  5.781658596372,   1.927219532124,  72.907125      ],
                              [  1.927219532124,   5.781658596372,  72.907125      ],
                              [  5.781658596372,   5.781658596372,  72.907125      ],
                              [ -0.            ,   1.927219532124,  74.269875      ],
                              [  3.854439064248,   1.927219532124,  74.269875      ],
                              [ -0.            ,   5.781658596372,  74.269875      ],
                              [  3.854439064248,   5.781658596372,  74.269875      ],
                              [ -0.            ,   0.            ,  75.632625      ],
                              [  3.854439064248,   0.            ,  75.632625      ],
                              [ -0.            ,   3.854439064248,  75.632625      ],
                              [  3.854439064248,   3.854439064248,  75.632625      ],
                              [  1.927219532124,  -0.            ,  76.995375      ],
                              [  5.781658596372,  -0.            ,  76.995375      ],
                              [  1.927219532124,   3.854439064248,  76.995375      ],
                              [  5.781658596372,   3.854439064248,  76.995375      ],
                              [  1.927219532124,   1.927219532124,  78.358125      ],
                              [  5.781658596372,   1.927219532124,  78.358125      ],
                              [  1.927219532124,   5.781658596372,  78.358125      ],
                              [  5.781658596372,   5.781658596372,  78.358125      ],
                              [ -0.            ,   1.927219532124,  79.720875      ],
                              [  3.854439064248,   1.927219532124,  79.720875      ],
                              [ -0.            ,   5.781658596372,  79.720875      ],
                              [  3.854439064248,   5.781658596372,  79.720875      ],
                              [ -0.            ,   0.            ,  81.083625      ],
                              [  3.854439064248,   0.            ,  81.083625      ],
                              [ -0.            ,   3.854439064248,  81.083625      ],
                              [  3.854439064248,   3.854439064248,  81.083625      ],
                              [  1.927219532124,  -0.            ,  82.446375      ],
                              [  5.781658596372,  -0.            ,  82.446375      ],
                              [  1.927219532124,   3.854439064248,  82.446375      ],
                              [  5.781658596372,   3.854439064248,  82.446375      ],
                              [  1.927219532124,   1.927219532124,  83.809125      ],
                              [  5.781658596372,   1.927219532124,  83.809125      ],
                              [  1.927219532124,   5.781658596372,  83.809125      ],
                              [  5.781658596372,   5.781658596372,  83.809125      ],
                              [ -0.            ,   1.927219532124,  85.171875      ],
                              [  3.854439064248,   1.927219532124,  85.171875      ],
                              [ -0.            ,   5.781658596372,  85.171875      ],
                              [  3.854439064248,   5.781658596372,  85.171875      ],
                              [ -0.            ,   0.            ,  86.534625      ],
                              [  3.854439064248,   0.            ,  86.534625      ],
                              [ -0.            ,   3.854439064248,  86.534625      ],
                              [  3.854439064248,   3.854439064248,  86.534625      ]]*Angstrom

# Set up configuration
central_region = BulkConfiguration(
    bravais_lattice=central_region_lattice,
    elements=central_region_elements,
    cartesian_coordinates=central_region_coordinates
    )

device_configuration = DeviceConfiguration(
    central_region,
    [left_electrode, right_electrode]
    )

# Add tags
device_configuration.addTags('A1',     [32, 33, 34, 35, 40, 41, 42, 43, 48, 49, 50, 51, 56, 57,
                                       58, 59])
device_configuration.addTags('A2',     [36, 37, 38, 39, 44,
                                       45, 46, 47, 52, 53, 54, 55, 60, 61, 62, 63])
device_configuration.addTags('B1',     [64, 65, 66, 67, 72, 73, 74, 75, 80, 81, 82, 83, 88, 89,
                                       90, 91])
device_configuration.addTags('B2',     [68, 69, 70, 71, 76,
                                       77, 78, 79, 84, 85, 86, 87, 92, 93, 94, 95])
device_configuration.addTags('C1',     [96,  97,  98,  99, 104, 105,
                                       106, 107,  112, 113, 114, 115,
                                       120, 121, 122, 123])
device_configuration.addTags('C2',     [100, 101, 102, 103, 108, 109, 110, 111, 
                                       116, 117, 118, 119, 124, 125,
                                       126, 127])
device_configuration.addTags('D1',     [128, 129, 130, 131, 136, 137,
                                       138, 139, 144, 145, 146, 147,
                                        152, 153, 154, 155])
device_configuration.addTags('D2',     [132, 133, 134, 135, 140, 141, 142, 143,
                                       148, 149, 150, 151, 156, 157,
                                       158, 159])
device_configuration.addTags('E1',     [160, 161, 162, 163, 168, 169,
                                       170, 171, 176, 177, 178, 179,
                                       184, 185, 186, 187])
device_configuration.addTags('E2',     [164, 165, 166, 167, 172, 173, 174, 175,
                                       180, 181, 182, 183, 188, 189,
                                       190, 191])
device_configuration.addTags('F1',     [192, 193, 194, 195, 200, 201,
                                       202, 203, 208, 209, 210, 211,
                                        216, 217, 218, 219])
device_configuration.addTags('F2',     [196, 197, 198, 199, 204, 205, 206, 207, 208, 213, 214, 215, 220, 221,
                                       222, 223])
device_configuration.addTags('Left',  [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
                                       13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                                       26, 27, 28, 29, 30, 31])
device_configuration.addTags('Right', [224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
                                       234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
                                       244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
                                       254, 255])

# -------------------------------------------------------------
# Calculator
# -------------------------------------------------------------

                                       # Define a new class where the C atom has mass 14.00
## AlP 1 ### ORIGINAL
## AlAs 2
## GaP 3  
## GaAs 4

# 1-P 2-Al
# Replace all atoms tagged "A1" with carbon-14
#A
if test[0] == 2:
    for index in device_configuration.indicesFromTags("A1"):
        device_configuration.elements()[index] = Arsenic
elif test[0] == 3:
    for index in device_configuration.indicesFromTags("A2"):
        device_configuration.elements()[index] = Gallium
elif test[0] == 4:
    for index in device_configuration.indicesFromTags("A1"):
        device_configuration.elements()[index] = Arsenic
    for index in device_configuration.indicesFromTags("A2"):
        device_configuration.elements()[index] = Gallium
 
#B
if test[1] == 2:
    for index in device_configuration.indicesFromTags("B1"):
        device_configuration.elements()[index] = Arsenic
elif test[1] == 3:
    for index in device_configuration.indicesFromTags("B2"):
        device_configuration.elements()[index] = Gallium
elif test[1] == 4:
    for index in device_configuration.indicesFromTags("B1"):
        device_configuration.elements()[index] = Arsenic
    for index in device_configuration.indicesFromTags("B2"):
        device_configuration.elements()[index] = Gallium

#C
if test[2] == 2:
    for index in device_configuration.indicesFromTags("C1"):
        device_configuration.elements()[index] = Arsenic
elif test[2] == 3:
    for index in device_configuration.indicesFromTags("C2"):
        device_configuration.elements()[index] = Gallium
elif test[2] == 4:
    for index in device_configuration.indicesFromTags("C1"):
        device_configuration.elements()[index] = Arsenic
    for index in device_configuration.indicesFromTags("C2"):
        device_configuration.elements()[index] = Gallium

#D
if test[3] == 2:
    for index in device_configuration.indicesFromTags("D1"):
        device_configuration.elements()[index] = Arsenic
elif test[3] == 3:
    for index in device_configuration.indicesFromTags("D2"):
        device_configuration.elements()[index] = Gallium
elif test[3] == 4:
    for index in device_configuration.indicesFromTags("D1"):
        device_configuration.elements()[index] = Arsenic
    for index in device_configuration.indicesFromTags("D2"):
        device_configuration.elements()[index] = Gallium
 
#E
if test[4] == 2:
    for index in device_configuration.indicesFromTags("E1"):
        device_configuration.elements()[index] = Arsenic
elif test[4] == 3:
    for index in device_configuration.indicesFromTags("E2"):
        device_configuration.elements()[index] = Gallium
elif test[4] == 4:
    for index in device_configuration.indicesFromTags("E1"):
        device_configuration.elements()[index] = Arsenic
    for index in device_configuration.indicesFromTags("E2"):
        device_configuration.elements()[index] = Gallium

#F
if test[5] == 1:
    for index in device_configuration.indicesFromTags("F1"):
        device_configuration.elements()[index] = Aluminium
elif test[5] == 2:
    for index in device_configuration.indicesFromTags("F1"):
        device_configuration.elements()[index] = Aluminium
    for index in device_configuration.indicesFromTags("F2"):
        device_configuration.elements()[index] = Arsenic
elif test[5] == 4:
    for index in device_configuration.indicesFromTags("F2"):
        device_configuration.elements()[index] = Arsenic

# -------------------------------------------------------------
# Calculator
# -------------------------------------------------------------

potentialSet = TremoloXPotentialSet(name = 'Tersoff_Powell_2007')
potentialSet.addParticleType(ParticleType(symbol='Al', mass=26.9815 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=13))
potentialSet.addParticleType(ParticleType(symbol='N', mass=14.0067 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=7))
potentialSet.addParticleType(ParticleType(symbol='P', mass=30.9738 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=15))
potentialSet.addParticleType(ParticleType(symbol='As', mass=74.9216 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=33))
potentialSet.addParticleType(ParticleType(symbol='Ga', mass=69.723 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=31))
potentialSet.addParticleType(ParticleType(symbol='In', mass=114.818 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=49))
potentialSet.addParticleType(ParticleType(symbol='Sb', mass=121.76 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=51))


potential = TersoffSingleTypePotential(particleType = 'Al', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'N', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'P', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'As', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'Ga', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'In', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'Sb', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'As', A = 446079.331668*eV, B = 16.0304697869*eV, R = 3.4*Angstrom, S = 3.6*Angstrom, l = 5.84464068024*1/Angstrom, mu = 0.839717061922*1/Angstrom, alpha = 0.244341*1/Angstrom, beta = 0.257183, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 3.55586, c = 2.16345, d = 0.750147, h = -0.448899)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'As', A = 2866.66092152*eV, B = 809.217955972*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 2.44216741807*1/Angstrom, mu = 1.83960484959*1/Angstrom, alpha = 0.140874*1/Angstrom, beta = 0.139688, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 2.35072, c = 2.10031, d = 0.827636, h = -0.442115)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'As', A = 1780.77119387*eV, B = 330.992213383*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 2.54310038714*1/Angstrom, mu = 1.64996035006*1/Angstrom, alpha = 1.38402*1/Angstrom, beta = 0.359702, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 8.36992, c = 1.05025, d = 0.850097, h = -0.458041)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'P', A = 2806.02777654*eV, B = 378.063510794*eV, R = 3.0*Angstrom, S = 3.2*Angstrom, l = 2.89912244184*1/Angstrom, mu = 1.81864641828*1/Angstrom, alpha = 1.81771*1/Angstrom, beta = 0.339811, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.42195, c = 1.26417, d = 0.799535, h = -0.433247)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'P', A = 2979.85908544*eV, B = 404.713322979*eV, R = 3.2*Angstrom, S = 3.3*Angstrom, l = 2.71648405284*1/Angstrom, mu = 1.71809756046*1/Angstrom, alpha = 1.89106*1/Angstrom, beta = 0.338811, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.3449, c = 1.2179, d = 0.831026, h = -0.461576)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'P', A = 706.748753819*eV, B = 143.092861484*eV, R = 3.2*Angstrom, S = 3.4*Angstrom, l = 2.66302685677*1/Angstrom, mu = 1.59490381969*1/Angstrom, alpha = 1.89106*1/Angstrom, beta = 0.180382, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.3449, c = 1.2179, d = 0.831026, h = -0.461576)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'N', A = 8476.21720773*eV, B = 120.071835377*eV, R = 2.4*Angstrom, S = 2.6*Angstrom, l = 4.44279446732*1/Angstrom, mu = 1.7635875433*1/Angstrom, alpha = 1.80993*1/Angstrom, beta = 0.24139, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 6.15189, c = 2.59473, d = 0.891376, h = -0.505871)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'N', A = 5089.68130469*eV, B = 419.19142688*eV, R = 2.55*Angstrom, S = 2.75*Angstrom, l = 3.48292127513*1/Angstrom, mu = 2.05590031056*1/Angstrom, alpha = 1.59607*1/Angstrom, beta = 0.30813, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 9.74096, c = 1.07074, d = 0.725308, h = -0.533599)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'N', A = 2014.4712286*eV, B = 143.507300765*eV, R = 2.185*Angstrom, S = 2.485*Angstrom, l = 3.52685578566*1/Angstrom, mu = 1.6405506492*1/Angstrom, alpha = 1.99072*1/Angstrom, beta = 0.19987, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 2.66213, c = 2.33154, d = 0.831225, h = -0.638531)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'Sb', A = 2521.75690165*eV, B = 544.903920313*eV, R = 3.4*Angstrom, S = 3.6*Angstrom, l = 2.50244906524*1/Angstrom, mu = 1.74516821967*1/Angstrom, alpha = 0.968688*1/Angstrom, beta = 0.363018, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 4.60221, c = 1.20875, d = 0.839761, h = -0.427706)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'Sb', A = 14105.2788772*eV, B = 67.9591739905*eV, R = 3.6*Angstrom, S = 3.7*Angstrom, l = 3.53729436171*1/Angstrom, mu = 1.16887436611*1/Angstrom, alpha = 2.47677*1/Angstrom, beta = 0.304347, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 1.8926, c = 5.32122, d = 1.39907, h = -0.489527)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'Sb', A = 42112.5615678*eV, B = 198.131664381*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 4.01872266622*1/Angstrom, mu = 1.50451410321*1/Angstrom, alpha = 2.47677*1/Angstrom, beta = 0.604408, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 1.8926, c = 5.32122, d = 1.39907, h = -0.489527)
potentialSet.addPotential(potential)
calculator = TremoloXCalculator(parameters=potentialSet)
calculator.setInternalOrdering("default")
calculator.setVerletListsDelta(0.25*Angstrom)

device_configuration.setCalculator(calculator)
nlprint(device_configuration)
device_configuration.update()
#nlsave('md.nc', device_configuration)

# -------------------------------------------------------------
# Molecular Dynamics
# -------------------------------------------------------------

initial_velocity = MaxwellBoltzmannDistribution(
    temperature=300.0*Kelvin,
    remove_center_of_mass_momentum=True
)

method = NVTNoseHoover(
    time_step=1*femtoSecond,
    reservoir_temperature=300*Kelvin,
    thermostat_timescale=100*femtoSecond,
    heating_rate=0*Kelvin/picoSecond,
    chain_length=3,
    initial_velocity=initial_velocity,
)

md_trajectory = MolecularDynamics(
    device_configuration,
    constraints=[],
    trajectory_filename=None,
    #steps=200000,
    steps=10000,
    log_interval=100,
    method=method
)

device_configuration = md_trajectory.lastImage()
# nlsave('md.nc', md_trajectory)


# nlread('md.nc', BulkConfiguration)
# -------------------------------------------------------------
# Calculator
# -------------------------------------------------------------

potentialSet = TremoloXPotentialSet(name = 'Tersoff_Powell_2007')
potentialSet.addParticleType(ParticleType(symbol='Al', mass=26.9815 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=13))
potentialSet.addParticleType(ParticleType(symbol='N', mass=14.0067 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=7))
potentialSet.addParticleType(ParticleType(symbol='P', mass=30.9738 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=15))
potentialSet.addParticleType(ParticleType(symbol='As', mass=74.9216 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=33))
potentialSet.addParticleType(ParticleType(symbol='Ga', mass=69.723 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=31))
potentialSet.addParticleType(ParticleType(symbol='In', mass=114.818 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=49))
potentialSet.addParticleType(ParticleType(symbol='Sb', mass=121.76 * atomic_mass_unit, charge=None, sigma=None, sigma14=None, epsilon=None, epsilon14=None, atomicNumber=51))


potential = TersoffSingleTypePotential(particleType = 'Al', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'N', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'P', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'As', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'Ga', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'In', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffSingleTypePotential(particleType = 'Sb', A = 0.0*eV, B = 0.0*eV, R = 0.0*Angstrom, S = 0.0*Angstrom, l = 0.0*1/Angstrom, mu = 0.0*1/Angstrom, alpha = 0.0*1/Angstrom, beta = 1.0, omega = 0.0, chi = 1.0, chiR = 1.0, m = 0, n = 1.0, c = 0.0, d = 1, h = 0.0)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'As', A = 446079.331668*eV, B = 16.0304697869*eV, R = 3.4*Angstrom, S = 3.6*Angstrom, l = 5.84464068024*1/Angstrom, mu = 0.839717061922*1/Angstrom, alpha = 0.244341*1/Angstrom, beta = 0.257183, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 3.55586, c = 2.16345, d = 0.750147, h = -0.448899)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'As', A = 2866.66092152*eV, B = 809.217955972*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 2.44216741807*1/Angstrom, mu = 1.83960484959*1/Angstrom, alpha = 0.140874*1/Angstrom, beta = 0.139688, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 2.35072, c = 2.10031, d = 0.827636, h = -0.442115)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'As', A = 1780.77119387*eV, B = 330.992213383*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 2.54310038714*1/Angstrom, mu = 1.64996035006*1/Angstrom, alpha = 1.38402*1/Angstrom, beta = 0.359702, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 8.36992, c = 1.05025, d = 0.850097, h = -0.458041)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'P', A = 2806.02777654*eV, B = 378.063510794*eV, R = 3.0*Angstrom, S = 3.2*Angstrom, l = 2.89912244184*1/Angstrom, mu = 1.81864641828*1/Angstrom, alpha = 1.81771*1/Angstrom, beta = 0.339811, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.42195, c = 1.26417, d = 0.799535, h = -0.433247)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'P', A = 2979.85908544*eV, B = 404.713322979*eV, R = 3.2*Angstrom, S = 3.3*Angstrom, l = 2.71648405284*1/Angstrom, mu = 1.71809756046*1/Angstrom, alpha = 1.89106*1/Angstrom, beta = 0.338811, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.3449, c = 1.2179, d = 0.831026, h = -0.461576)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'P', A = 706.748753819*eV, B = 143.092861484*eV, R = 3.2*Angstrom, S = 3.4*Angstrom, l = 2.66302685677*1/Angstrom, mu = 1.59490381969*1/Angstrom, alpha = 1.89106*1/Angstrom, beta = 0.180382, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 5.3449, c = 1.2179, d = 0.831026, h = -0.461576)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'N', A = 8476.21720773*eV, B = 120.071835377*eV, R = 2.4*Angstrom, S = 2.6*Angstrom, l = 4.44279446732*1/Angstrom, mu = 1.7635875433*1/Angstrom, alpha = 1.80993*1/Angstrom, beta = 0.24139, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 6.15189, c = 2.59473, d = 0.891376, h = -0.505871)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'N', A = 5089.68130469*eV, B = 419.19142688*eV, R = 2.55*Angstrom, S = 2.75*Angstrom, l = 3.48292127513*1/Angstrom, mu = 2.05590031056*1/Angstrom, alpha = 1.59607*1/Angstrom, beta = 0.30813, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 9.74096, c = 1.07074, d = 0.725308, h = -0.533599)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'N', A = 2014.4712286*eV, B = 143.507300765*eV, R = 2.185*Angstrom, S = 2.485*Angstrom, l = 3.52685578566*1/Angstrom, mu = 1.6405506492*1/Angstrom, alpha = 1.99072*1/Angstrom, beta = 0.19987, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 2.66213, c = 2.33154, d = 0.831225, h = -0.638531)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Ga', particleType2 = 'Sb', A = 2521.75690165*eV, B = 544.903920313*eV, R = 3.4*Angstrom, S = 3.6*Angstrom, l = 2.50244906524*1/Angstrom, mu = 1.74516821967*1/Angstrom, alpha = 0.968688*1/Angstrom, beta = 0.363018, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 4.60221, c = 1.20875, d = 0.839761, h = -0.427706)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'In', particleType2 = 'Sb', A = 14105.2788772*eV, B = 67.9591739905*eV, R = 3.6*Angstrom, S = 3.7*Angstrom, l = 3.53729436171*1/Angstrom, mu = 1.16887436611*1/Angstrom, alpha = 2.47677*1/Angstrom, beta = 0.304347, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 1.8926, c = 5.32122, d = 1.39907, h = -0.489527)
potentialSet.addPotential(potential)
potential = TersoffDiag2Potential(particleType1 = 'Al', particleType2 = 'Sb', A = 42112.5615678*eV, B = 198.131664381*eV, R = 3.6*Angstrom, S = 3.8*Angstrom, l = 4.01872266622*1/Angstrom, mu = 1.50451410321*1/Angstrom, alpha = 2.47677*1/Angstrom, beta = 0.604408, omega = 1.0, chi = 1.0, chiR = 1.0, m = 3, n = 1.8926, c = 5.32122, d = 1.39907, h = -0.489527)
potentialSet.addPotential(potential)
calculator = TremoloXCalculator(parameters=potentialSet)
calculator.setInternalOrdering("default")
calculator.setVerletListsDelta(0.25*Angstrom)

device_configuration.setCalculator(calculator)
nlprint(device_configuration)
device_configuration.update()
#nlsave('phonons.nc', device_configuration)

# -------------------------------------------------------------
# Dynamical Matrix
# -------------------------------------------------------------
dynamical_matrix = DynamicalMatrix(
    configuration=device_configuration,
    repetitions=(1, 1, 1),
    atomic_displacement=0.01*Angstrom,
    acoustic_sum_rule=True,
    symmetrize=True,
    finite_difference_method=Central,
    processes_per_displacement=1,
    constrain_electrodes=False,
    use_equivalent_bulk=True,
    )
#nlsave('phonons.nc', dynamical_matrix)

# -------------------------------------------------------------
# Phonon Transmission Spectrum
# -------------------------------------------------------------
qpoint_grid = MonkhorstPackGrid(
    na=2,
    nb=2,
    )

phonon_transmission_spectrum = PhononTransmissionSpectrum(
    configuration=device_configuration,
    dynamical_matrix=dynamical_matrix,
    energies=numpy.linspace(0,0.1,501)*eV,
    qpoints=qpoint_grid,
    infinitesimal=1e-06*eV,
    self_energy_calculator=RecursionSelfEnergy(),
    )

# -------------------------------------------------------------
# ITC
# -------------------------------------------------------------
# Read the phonon transmission spectrum from file cnt_phonons.nc
#csvTest_write.py

#phonon_transmission_spectrum = nlread("phononsAlPAAlSb.nc",PhononTransmissionSpectrum)[0]
# Define a temperature range
temp = 300
# Calculate the phonon thermal conductance at each temperature 

conductance = phonon_transmission_spectrum.thermalConductance(
phonon_temperature=[temp]*Kelvin)
conductance = int(conductance*10**20/64)

item=[conductance]
#with open('data.csv','w') as data:
    #writer = csv.writer(data)
    #writer.writerow(item)

with open('/home/xiao/combo/conductance.txt','a+') as file:   
    #write_str = '%f'%(item)  
    file.write(str(item))  
np.savetxt('dataout',item,fmt='%f',delimiter=',')


